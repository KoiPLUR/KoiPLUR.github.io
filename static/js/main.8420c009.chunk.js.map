{"version":3,"sources":["logo.png","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","rx_live","App","state","storageValue","accounts","contract","MintAmount","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","KOIProject","networks","instance","Contract","abi","address","setState","runExample","alert","error","methods","getPrice","call","_currentPrice","balanceOf","_Balance","KOI_Provenance","_KOI_Provenance","symbol","_symbol","totalSupply","_totalSupply","currentPrice","Balance","handleSubmit","event","mint","send","value","from","_count","handleMintAmountChange","evt","test","target","this","className","src","logo","alt","id","align","type","maxLength","max","pattern","placeholder","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8420c009.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.52daf854.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://rpc-mainnet.maticvigil.com/v1/5d7c559731df2790351c94955912515f2d7f6a28\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n//import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport KOIProject from \"./contracts/KOIProject.json\";\n//import AURAWrapped from \"./contracts/AURAWrapped.json\";\nimport getWeb3 from \"./getWeb3\";\nimport logo from \"./logo.png\";\n//import { Button } from 'react-bootstrap';\nimport \"./App.css\";\nimport \"./bootstrap/dist/css/bootstrap.min.css\";\n\nconst rx_live = /^[+-]?\\d*(?:\\d*)?$/;\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    MintAmount: \"0\",\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = KOIProject.networks[networkId];\n      const instance = new web3.eth.Contract(\n        KOIProject.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    // await contract.methods.Get_rich_All().send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n\n    console.log(accounts);\n    const _currentPrice = await contract.methods.getPrice().call();\n    const _Balance = await contract.methods.balanceOf(accounts[0]).call();\n    const _KOI_Provenance = await contract.methods.KOI_Provenance().call();\n    const _symbol = await contract.methods.symbol().call();\n    const _totalSupply = await contract.methods.totalSupply().call();\n\n    // Update state with the result.\n    this.setState({ currentPrice: _currentPrice });\n    this.setState({ Balance: _Balance });\n    this.setState({ KOI_Provenance: _KOI_Provenance });\n    this.setState({ symbol: _symbol });\n    this.setState({ totalSupply: _totalSupply });\n\n    // const _MaticBalance = await  accounts[0].getBalance()\n    // this.setState({ MaticBalance: _MaticBalance});\n  };\n\n  handleSubmit = async (event) => {\n    //event.preventDefault();\n    console.log(this.state.accounts[0]);\n    //console.log(event);\n\n   // await this.state.contract.Get_ricj_All.send({ from: this.accounts[0] });\n   if (this.state.MintAmount * this.state.currentPrice>0){\n    await this.state.contract.methods.mint(this.state.MintAmount).send({\n      value: this.state.MintAmount * this.state.currentPrice,\n      from: this.state.accounts[0],\n      _count: this.state.MintAmount\n    });\n    this.setState({ MintAmount: 0 });\n\n  }\n  };\n\n  // handleSubmit = async (event) => {\n  //   event.preventDefault();\n  //   console.log(this.state.accounts[0]);\n  //   //  this.state.contract.methods.Get_rich_All().send({ from: this.state.accounts[0] });\n  //   this.state.contract.methods.mint(this.state.MintAmount).send({\n  //     value: (this.state.MintAmount * this.state.currentPrice) / 1e18,\n  //     from: this.state.accounts[0]\n  //   });\n  // };\n\n  handleMintAmountChange = (evt) => {\n    if (rx_live.test(evt.target.value)) {\n      this.setState({ MintAmount: evt.target.value });\n    }\n    if (evt.target.value > 20) {\n      this.setState({ MintAmount: 20 });\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n          <img src={logo} alt=\"KOI-logo\" id=\"logo\" />\n          <h1>The core spirit of KOI Project.</h1>\n          <p align=\"left\">\n            The core spirit of KOI Project is PLUR, which refers to Pluralism, a\n            philosophical thinking in which it is believed that the world begins\n            with a combination of multiple elements. PLUR also has an important\n            symbolic meaning in global culture: Peace, Love, Unity and Respect,\n            it's the best blessing for the entire human civilization.\n          </p>\n        </div>\n\n        <div className=\"section\">\n          <h2>Active Account</h2>\n          Your Address: {this.state.accounts[0]}\n          {/* Your Matic: {this.state.MaticBalance} */}\n        </div>\n\n        <div className=\"section\">\n          <p>\n            <strong>Total Supply: </strong>\n            {this.state.totalSupply} / 30000\n          </p>\n\n          <p>\n            <strong>Final Provenance Proof: </strong>\n            <small>{this.state.KOI_Provenance}</small>\n          </p>\n          <p>\n            <strong>KOI current price: </strong>\n            {this.state.currentPrice / 1e18} Matic\n          </p>\n          <p>\n            <div>\n              <strong>Your Balance: </strong>\n              {this.state.Balance} KOI\n            </div>\n          </p>\n          <h3>Mint KOI now!!!</h3>\n    \n            <label>\n              <input\n                type=\"text\"\n                id=\"MintAmount\"\n                maxLength={5}\n                max={20}\n                pattern=\"[+-]?\\d+(?:[.,]\\d+)?\"\n                placeholder=\"Enter amount\"\n                onChange={this.handleMintAmountChange}\n                value={this.state.MintAmount}\n              />\n            </label>\n            <input type=\"button\" value=\"Mint\" onClick={this.handleSubmit} />\n            <p>\n              Total Cost:{\" \"}\n              {(this.state.MintAmount * this.state.currentPrice) / 1e18} Matic\n            </p>\n    \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}